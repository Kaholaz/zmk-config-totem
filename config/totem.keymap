//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
};

/ {
    combos {
        compatible = "zmk,combos";

        ret {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
            layers = <0 1 2 3>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12 13>;
            layers = <0 1 2 3>;
        };

        shift_combo_left {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <13 12>;
            layers = <0 1 2 3>;
        };

        shift_combo_right {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <16 17>;
            layers = <0 1 2 3>;
        };

        dual_shift {
            bindings = <&caps>;
            key-positions = <12 13 16 17>;
            layers = <0 1 2 3>;
        };

        altgr {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <32 37>;
        };

        left_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <11 12>;
        };

        esc {
            bindings = <&key_lock 4 ESCAPE>;
            key-positions = <17 18>;
        };

        oe {
            bindings = <&kp RA(O)>;
            key-positions = <37 8>;
            layers = <0>;
        };

        ae {
            bindings = <&kp RA(SINGLE_QUOTE)>;
            key-positions = <37 31>;
            layers = <0>;
        };

        aa {
            bindings = <&kp RA(A)>;
            key-positions = <20 37>;
            layers = <0>;
        };
    };

    behaviors {
        mt_thumb: mt_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_THUMB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <220>;
            require-prior-idle-ms = <0>;
        };

        mt_nav: mt_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_NAV";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
            quick-tap-ms = <100>;
        };

        numbers: numbers {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMBERS";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&mo 2>, <&sl 2>;
        };

        caps: caps {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;
        };

        key_lock: key_lock {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_LOCK";
            bindings = <&tog>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <1500>;
        };

        tap_unlock: tap_unlock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_UNLOCK";
            #binding-cells = <0>;
            bindings = <&none>, <&none>, <&tog 4>;
        };
    };

    macros {
        pipe: pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp GT>;
            label = "PIPE";
        };

        thin_arrow: thin_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "THIN_ARROW";
        };

        thick_arrow: thick_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "THICK_ARROW";
        };

        eq: eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
            label = "EQ";
        };

        eqeq: eqeq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL &kp EQUAL>;
            label = "EQEQ";
        };

        le: le {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LE";
        };

        ge: ge {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp EQUAL>;
            label = "GE";
        };

        rev_arrow: rev_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp MINUS>;
            label = "REV_ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
              &kp Q  &kp W  &kp E             &kp R     &kp T        &kp Y          &kp U  &kp I          &kp O    &kp P
              &kp A  &kp S  &kp D             &kp F     &kp G        &kp H          &kp J  &kp K          &kp L    &kp SEMI
&kp LEFT_ALT  &kp Z  &kp X  &kp C             &kp V     &kp B        &kp N          &kp M  &kp COMMA      &kp DOT  &kp FSLH  &kp SINGLE_QUOTE
                            &kp LEFT_CONTROL  &numbers  &kp SPACE    &kp BACKSPACE  &mo 1  &kp LEFT_META
            >;
        };

        symbols {
            label = "SYM";
            bindings = <
        &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)    &kp LS(NUMBER_6)  &kp LS(N7)     &kp LS(NUMBER_8)   &kp LS(NUMBER_9)      &kp LS(NUMBER_0)
        &kp GRAVE         &pipe             &eq               &le               &thin_arrow         &kp EQUAL         &kp MINUS      &kp BACKSLASH      &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)
&trans  &kp LS(GRAVE)     &rev_arrow        &eqeq             &ge               &thin_arrow         &kp LS(EQUAL)     &kp LS(MINUS)  &kp LS(BACKSLASH)  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none
                                            &trans            &mo 3             &trans              &trans            &trans         &trans
            >;
        };

        num_nav {
            label = "NUM";
            bindings = <
        &kp PRINTSCREEN  &kp PAGE_DOWN  &kp UP       &kp PAGE_UP  &kp C_VOL_UP    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5
        &kp HOME         &kp LEFT       &kp DOWN     &kp RIGHT    &kp C_MUTE      &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0
&trans  &kp END          &kp C_PREV     &kp C_PAUSE  &kp C_NEXT   &kp C_VOL_DN    &none         &none         &trans        &trans        &trans  &none
                                        &trans       &trans       &trans          &trans        &mo 3         &trans
            >;
        };

        fn_bt {
            label = "FN";
            bindings = <
        &none         &none         &none         &none         &none           &kp F1   &kp F2   &kp F3  &kp F4  &kp F5
        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&trans  &none         &out OUT_USB  &none         &out OUT_BLE  &none           &kp F11  &kp F12  &none   &none   &none    &bt BT_CLR
                                    &trans        &trans        &trans          &trans   &trans   &trans
            >;
        };

        lock {
            bindings = <
             &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock    &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock
             &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock    &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock
&tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock    &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock  &tap_unlock
                                       &tap_unlock  &tap_unlock  &tap_unlock    &tap_unlock  &tap_unlock  &tap_unlock
            >;
        };
    };
};
